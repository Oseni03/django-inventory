# Generated by Django 4.0.6 on 2022-09-15 20:29

from django.db import migrations, models
import django.db.models.deletion
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Attribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='format: required max-255', max_length=255, unique=True, verbose_name='product attribute name')),
                ('description', models.TextField(help_text='format: required', verbose_name='product attribute description')),
            ],
            options={
                'verbose_name': 'product attribute',
                'verbose_name_plural': 'product attributes',
            },
        ),
        migrations.CreateModel(
            name='AttributeValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(help_text='format: required max-255', max_length=255, verbose_name='product value')),
                ('attribute', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='values', to='inventory.attribute')),
            ],
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='format: required max-255', max_length=255, unique=True, verbose_name='brand name')),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='format: required max-100', max_length=100, verbose_name='category name')),
                ('slug', models.SlugField(help_text='format: required letters, numbers, underscore or hyphen', max_length=150, verbose_name='category safe url')),
                ('is_active', models.BooleanField(default=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, help_text='format: not required', null=True, on_delete=django.db.models.deletion.PROTECT, to='inventory.category', verbose_name='parent of category')),
            ],
            options={
                'verbose_name': 'product category',
                'verbose_name_plural': 'product categories',
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sku', models.CharField(help_text='format: required max-20', max_length=20, unique=True, verbose_name='stock keeping unit')),
                ('upc', models.CharField(help_text='format: required max-12', max_length=12, unique=True, verbose_name='universal product code')),
                ('is_active', models.BooleanField(default=True, help_text='true: product-visible', verbose_name='product visibility')),
                ('is_default', models.BooleanField(default=False, help_text='format: default=false, true=default product', verbose_name='product default')),
                ('retail_price', models.DecimalField(decimal_places=2, error_messages={'name': {'max_length': 'the price must be between 0 and 999.99.'}}, help_text='format: maximum price 999.99', max_digits=5, verbose_name='recommended retail price')),
                ('store_price', models.DecimalField(decimal_places=2, error_messages={'name': {'max_length': 'the price must be between 0 and 999.99.'}}, help_text='format: maximum price 999.99', max_digits=5, verbose_name='regular store price')),
                ('sale_price', models.DecimalField(decimal_places=2, error_messages={'name': {'max_length': 'the price must be between 0 and 999.99.'}}, help_text='format: maximum price 999.99', max_digits=5, verbose_name='sale price')),
                ('discount_price', models.DecimalField(blank=True, decimal_places=2, error_messages={'name': {'max_length': 'the price must be between 0 and 999.99.'}}, help_text='format: maximum price 999.99', max_digits=5, null=True, verbose_name='sale price')),
                ('weight', models.FloatField(blank=True, verbose_name='product weight')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='format: y-m-d H:M:S', verbose_name='date sub-product created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='format: y-m-d H:M:S', verbose_name='date sub-product updated')),
            ],
            options={
                'verbose_name_plural': 'Inventory',
            },
        ),
        migrations.CreateModel(
            name='ProductType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='format: required max-255', max_length=255, unique=True, verbose_name='product type')),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_checked', models.DateTimeField(blank=True, editable=False, help_text='format: blank-True, null-True', null=True, verbose_name='inventory stock check date')),
                ('units', models.IntegerField(default=0, help_text='format: required, default-0', verbose_name='units/qty of stock')),
                ('units_sold', models.IntegerField(default=0, help_text='format: required, default-0', verbose_name='units sold till date')),
                ('inventory', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='stock', to='inventory.inventory')),
            ],
            options={
                'verbose_name_plural': 'Stock',
            },
        ),
        migrations.CreateModel(
            name='ProductTypeAttribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attribute', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='attributes', to='inventory.attribute')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='types', to='inventory.producttype')),
            ],
            options={
                'unique_together': {('attribute', 'type')},
            },
        ),
        migrations.AddField(
            model_name='producttype',
            name='type_attributes',
            field=models.ManyToManyField(related_name='product_type', through='inventory.ProductTypeAttribute', to='inventory.attribute'),
        ),
        migrations.CreateModel(
            name='ProductAttributeValues',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attributevalues', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='attributevaluess', to='inventory.attributevalue')),
                ('productinventory', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='productattributevaluess', to='inventory.inventory')),
            ],
            options={
                'unique_together': {('attributevalues', 'productinventory')},
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('web_id', models.CharField(help_text='format: required unique', max_length=50, unique=True, verbose_name='Product website ID')),
                ('name', models.CharField(help_text='format: required max-255', max_length=255, verbose_name='product name')),
                ('slug', models.SlugField(help_text='format: required letters, numbers, underscore or hyphen', max_length=255, verbose_name='product safe url')),
                ('description', models.TextField(help_text='format: required', verbose_name='product description')),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_bestseller', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='format: y-m-d H:M:S', verbose_name='date product created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='format: y-m-d H:M:S', verbose_name='date product updated')),
                ('category', mptt.fields.TreeManyToManyField(related_name='products', to='inventory.category')),
            ],
            options={
                'verbose_name_plural': 'Products',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='format: required', upload_to='products/', verbose_name='product image')),
                ('alt_text', models.CharField(help_text='format: required, max_length-255', max_length=255, verbose_name='alternate text')),
                ('is_feature', models.BooleanField(default=False, help_text='format: default=false, true=default image', verbose_name='product default image')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='format: y-m-d H:M:S', verbose_name='date product image created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='format: y-m-d H:M:S', verbose_name='date product image updated')),
                ('inventory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='media', to='inventory.inventory')),
            ],
            options={
                'verbose_name': 'product image',
                'verbose_name_plural': 'product images',
            },
        ),
        migrations.AddField(
            model_name='inventory',
            name='attribute_values',
            field=models.ManyToManyField(related_name='inventory', through='inventory.ProductAttributeValues', to='inventory.attributevalue'),
        ),
        migrations.AddField(
            model_name='inventory',
            name='brand',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='inventory', to='inventory.brand'),
        ),
        migrations.AddField(
            model_name='inventory',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='inventory', to='inventory.product'),
        ),
        migrations.AddField(
            model_name='inventory',
            name='product_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='inventory', to='inventory.producttype'),
        ),
    ]
